#include <iostream>
#include <list>
using namespace std;

class Node {
public:
	int value;
	Node* parent;
	list<Node*> childList;

	Node(Node* parent, int value) {
		this->parent = parent;
		this->value = value;
	}
};

class Tree {
public:
	Node* root;
	list<Node*> nodeList;

	Tree() {
		root = new Node(nullptr, 1);
		nodeList.push_back(root);
	}

	Node* find(int x) {
		for (auto n : nodeList) {
			if (n->value == x) {
				return n;
			}
		}
		return nullptr;
	}

	void Insert(int x, int v) {
		Node* parNode = find(x);
		if (parNode == nullptr || find(v) != nullptr) {
			cout << -1 << endl;
			return;
		}
		Node* newNode = new Node(parNode, v);
		parNode->childList.push_back(newNode);
		nodeList.push_back(newNode);
	}

	void Delete(int v) {
		Node* delNode = find(v);
		if (delNode == root || delNode == nullptr) {
			cout << -1 << endl;
			return;
		}
		for (auto n : delNode->childList) {
			n->parent = delNode->parent;
			delNode->parent->childList.push_back(n);
		}
		delNode->parent->childList.remove(delNode);
		nodeList.remove(delNode);
	}

	void Parent(int v) {
		Node* tarNode = find(v);
		if (tarNode == nullptr) {
			cout << -1 << endl;
			return;
		}
		if (tarNode == root) {
			cout << 0 << endl;
			return;
		}
		cout << tarNode->parent->value << endl;
	}

	void Children(int v) {
		Node* tarNode = find(v);
		if (tarNode == nullptr) {
			cout << -1 << endl;
			return;
		}
		if (tarNode->childList.size() == 0) {
			cout << 0 << endl;
			return;
		}
		for (auto n : tarNode->childList) {
			cout << n->value << " ";
		}
		cout << endl;
	}

	void Ancestors(int v) {
		Node* tarNode = find(v);
		if (tarNode == nullptr) {
			cout << -1 << endl;
			return;
		}
		if (tarNode == root) {
			cout << 0 << endl;
			return;
		}
		int cnt = 0;
		while (tarNode->parent != nullptr) {
			tarNode = tarNode->parent;
			cnt++;
		}
		cout << cnt << endl;
	}
};

int main() {
	int N;
	cin >> N;
	Tree t;
	while (N--) {
		string str;
		cin >> str;
		if (str == "Insert") {
			int x, y;
			cin >> x >> y;
			t.Insert(x, y);
		}
		else if (str == "Delete") {
			int v;
			cin >> v;
			t.Delete(v);
		}
		else if (str == "Parent") {
			int v;
			cin >> v;
			t.Parent(v);
		}
		else if (str == "Children") {
			int v;
			cin >> v;
			t.Children(v);
		}
		else if (str == "Ancestors") {
			int v;
			cin >> v;
			t.Ancestors(v);
		}
	}
}
