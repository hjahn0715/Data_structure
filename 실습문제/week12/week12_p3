#include<iostream>
using namespace std;

#define NO 0
#define IS 1
#define AV 2

class Entry {
public:
	int key;
	string value;
	int valid;

	Entry() {
		key = 0;
		value = " ";
		valid = NO;
	}

	Entry(int key, string value) {
		this->key = key;
		this->value = value;
		valid = IS;
	}
};

class HashTable {
public:
	Entry* hashTable;
	int capa;
	int divisor;
	int size;
	int cnt = 0;

	HashTable(int capa, int divisor) {
		this->capa = capa;
		this->divisor = divisor;
		hashTable = new Entry[capa];
	}

	int hashF(int k) {
		return k % capa;
	}

	int hashFF(int k) {
		return divisor - (k % divisor);
	}

	int getSize() {
		return size;
	}

	void insert(int k, string s) {
		int idx = hashF(k);
		int probing = 1;
		while (hashTable[idx].valid == IS && probing <= capa) {
			if (hashTable[idx].key == k) {
				idx = -1;
				cout << hashF(k) << " " << idx << "\n";
				return;
			}
			idx = (idx + hashFF(k)) % capa;
			probing++;
		}
		if (probing > capa) {
			idx = -1;
			cout << hashF(k) << " " << idx << "\n";
			return;
		}
		cout << hashF(k) << " " << idx << "\n";
		hashTable[idx] = Entry(k, s);
		size++;
	}

	void erase(int k) {
		int idx = hashF(k);
		int probing = 1;

		while (hashTable[idx].valid != NO && probing <= capa) {
			if (hashTable[idx].valid == IS && hashTable[idx].key == k) {
				cout << hashTable[idx].value << "\n";
				hashTable[idx].valid = AV;
				size--;
				return;
			}
			idx = (idx + hashFF(k)) % capa;
			probing++;
		}
		cout << -1 << "\n";
	}

	void find(int k) {
		int idx = hashF(k);
		int probing = 1;
		cnt++;
		while (hashTable[idx].valid != NO && probing <= capa) {
			if (hashTable[idx].valid == IS && hashTable[idx].key == k) {
				cout << hashTable[idx].value << "\n";
				return;
			}
			idx = (idx + hashFF(k))%capa;
			probing++;
			cnt++;
		}
		cout << -1 << "\n";
	}
};

int main() {
	int T, N,M;
	cin >> T >> N>>M;
	HashTable h = HashTable(N,M);
	while (T--) {
		string str;
		cin >> str;
		if (str == "size") {
			cout << h.getSize() << "\n";
		}
		else if (str == "insert") {
			int k;
			string s;
			cin >> k >> s;
			h.insert(k, s);
		}
		else if (str == "erase") {
			int k;
			cin >> k;
			h.erase(k);
		}
		else if (str == "find") {
			int k;
			cin >> k;
			h.find(k);
		}
	}
	cout << h.cnt << "\n";
}

