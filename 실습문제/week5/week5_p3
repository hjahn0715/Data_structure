#include <iostream>
using namespace std;

class Vector {
public:
	int* arr;
	int capacity;
	int size;

	Vector() {
		capacity = 1;
		arr = new int[1];
		size = 0;
	}

	void resize(int capacity) {
		if (capacity <= this->capacity) {
			return;
		}
		int* newarr = new int[capacity];

		if (arr != nullptr) {
			for (int i = 0; i < size; i++) {
				newarr[i] = arr[i];
			}
			delete arr;
			arr = newarr;
			this->capacity = capacity;
		}
	}

	void Print() {
		if (size == 0) {
			cout << "empty" << endl;
			return;
		}
		for (int i = 0; i < size; i++) {
			cout << arr[i] << " ";
		}
		cout << endl;
	}

	void Size() {
		cout << size << endl;
	}

	void Erase(int idx) {
		if (idx >= size) {
			cout << -1 << endl;
			return;
		}
		for (int i = idx; i < size; i++) {
			arr[i] = arr[i + 1];
		}
		size--;
	}

	void Insert(int idx, int x) {
		if (size == capacity) {
			resize(2 * capacity);
		}
		for (int i = size; i > idx; i--) {
			arr[i] = arr[i - 1];
		}
		arr[idx] = x;
		size++;
	}

	void Print_Odd(int idx) {
		if (idx >= size) {
			cout << -1 << endl;
			return;
		}
		int cnt = 0;
		for (int i = idx+1; i < size; i++) {
			if (arr[i] % 2 == 1) {
				cout << arr[i] << " ";
				cnt++;
			}
		}
		if (cnt == 0) {
			cout << -1;
		}
		cout << endl;
	}
};

int main() {
	int N;
	cin >> N;
	Vector v;
	while (N--) {
		string str;
		cin >> str;
		if (str == "Print") {
			v.Print();
		}
		else if (str == "Size") {
			v.Size();
		}
		else if (str == "Erase") {
			int i;
			cin >> i;
			v.Erase(i);
		}
		else if (str == "Insert") {
			int i, x;
			cin >> i >> x;
			v.Insert(i, x);
		}
		else if (str == "Print_Odd") {
			int i;
			cin >> i;
			v.Print_Odd(i);
		}
	}
}
