#include <iostream>
using namespace std;

class Node {
public:
	int value;
	Node* next;

	Node() {
		value = 0;
		next = nullptr;
	}
};

class SLL {
public:
	Node* head;
	Node* tail;
	int size;

	SLL() {
		head = new Node();
		tail = new Node();
		size = 0;
		head->next = tail;
	}

	void Print() {
		if (size == 0) {
			cout << "empty" << endl;
			return;
		}
		Node* curNode = head->next;
		for (int i = 0; i < size; i++) {
			cout << curNode->value << " ";
			curNode = curNode->next;
		}
		cout << endl;
	}

	void Append(int x) {
		Node* newNode = new Node();
		newNode->value = x;
		Node* curNode = head;
		while (curNode->next != tail) {
			curNode = curNode->next;
		}
		curNode->next = newNode;
		newNode->next = tail;
		size++;
		Print();
	}

	void Delete(int idx) {
		if (size == 0 || idx >= size) {
			cout << -1 << endl;
			return;
		}
		Node* curNode = head;
		for (int i = 0; i < idx; i++) {
			curNode = curNode->next;
		}
		Node* delNode = curNode->next;
		curNode->next = delNode->next;
		cout << delNode->value << endl;
		delete delNode;
		size--;
	}

	void Update(int idx, int x) {
		if (idx >= size) {
			cout << -1 << endl;
			return;
		}
		Node* curNode = head->next;
		for (int i = 0; i < idx; i++) {
			curNode = curNode->next;
		}
		curNode->value = x;
	}

	void MinMax_Sum() {
		if (size == 0) {
			cout << 0 << endl;
			return;
		}
		int max = head->next->value;
		int min = head->next->value;

		Node* curNode = head->next;
		for (int i = 0; i < size; i++) {
			if (curNode->value > max) {
				max = curNode->value;
			}
			if (curNode->value < min) {
				min = curNode->value;
			}
			curNode = curNode->next;
		}
		cout << max + min << endl;
	}
};

int main() {
	int N;
	cin >> N;
	SLL s;
	while (N--) {
		string str;
		cin >> str;
		if (str == "Print") {
			s.Print();
		}
		else if (str == "Append") {
			int x;
			cin >> x;
			s.Append(x);
		}
		else if (str == "Delete") {
			int i;
			cin >> i;
			s.Delete(i);
		}
		else if (str == "Update") {
			int i, x;
			cin >> i >> x;
			s.Update(i, x);
		}
		else if (str == "MinMax_Sum") {
			s.MinMax_Sum();
		}
	}
}
